/*
 * (C) Copyright 2007
 * ARM Ltd.
 * Kosta Demirev, kdemirev@yahoo.com
 * Configuration for LeapFrog LP1000.
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#ifndef __CONFIG_H
#define __CONFIG_H

#include "lf1000_mach.h" /* for machine type, this file is generated by the
			  * installation script. */

/*
 * High Level Configuration Options
 * (easy to change)
 */
//#define	CONFIG_ARM
#define CONFIG_ARM926EJS	1	/* This is an arm926ejs CPU core  */
#define CONFIG_LF1000		1	/* in LeapFrog LF1000		  */

// Boot options
#define	CONFIG_SKIP_LOWLEVEL_INIT
//#define	CONFIG_SKIP_RELOCATE_UBOOT

// Interrupts
//#define CONFIG_USE_IRQ

//#define	CONFIG_LCD

#define CFG_MEMTEST_START       0x00000000
#define CFG_MEMTEST_END         0x02000000

/* PLL0 at 199.8MHz feeds timer 0.  We divide it by 256.
   Timer will wrap every 90 minutes.
*/
#if (defined CONFIG_MACH_ME_MP2530F || defined CONFIG_MACH_LF_MP2530F)
#define CFG_HZ                  (199800000/256)
#elif (defined CONFIG_MACH_ME_LF1000 || defined CONFIG_MACH_LF_LF1000)
#define CFG_HZ			(384000000/256)
#endif
//#define CFG_TIMERBASE           0x101E2000	/* Timer 0 and 1 base */
#define CFG_TIMERBASE           0xc0001800	/* Timer 0 */

#define CFG_TIMER_INTERVAL	10000
#define CFG_TIMER_RELOAD	(CFG_TIMER_INTERVAL >> 4)	/* Divide by 16 */
#define CFG_TIMER_CTRL          0x84				/* Enable, Clock / 16 */

#define CONFIG_CMDLINE_TAG		1	/* enable passing of ATAGs  */
#define CONFIG_SETUP_MEMORY_TAGS	1
#define CONFIG_MISC_INIT_R		1	/* call misc_init_r during start up */
/*
 * Size of malloc() pool
 */
#define CFG_MALLOC_LEN	(CFG_ENV_SIZE + 128*1024)
#define CFG_GBL_DATA_SIZE	128	/* size in bytes reserved for initial data */

/*
 * Hardware drivers
 */
/*
 * Ether Configuration
 */
//#define	CONFIG_HAS_ETH0
#define	CONFIG_DRIVER_CS8900
#ifdef CONFIG_MACH_ME_LF1000
	#define	CS8900_BASE	0x88000000
#else
	#define	CS8900_BASE	0x84000000
#endif
	#define	CS8900_BUS16
//	#define	CS8900_BUS32
	#define CONFIG_ETHADDR	00:50:c2:1e:af:fb
//	#define	CONFIG_SERVERIP	172.16.1.10
//	#define	CONFIG_IPADDR	172.16.1.20
	#define	CONFIG_SERVERIP	192.168.0.113
	#define	CONFIG_IPADDR	192.168.0.111
/*
 * UART Configuration
 */
#define	CONFIG_LF1000_UART
#define CONFIG_BAUDRATE         115200
#define CFG_BAUDRATE_TABLE      { 9600, 19200, 38400, 57600, 115200 }
#define CFG_SERIAL3		// for debug console

#define CONFIG_COMMANDS	(CFG_CMD_DHCP | \
	                     CFG_CMD_IMI | \
						 CFG_CMD_NET | \
						 CFG_CMD_PING | \
						 CFG_CMD_BDI | \
						 CFG_CMD_MEMORY | \
						 CFG_CMD_NAND | \
	                     CFG_CMD_RUN | \
                         CFG_CMD_AUTOSCRIPT | \
						 CFG_CMD_ECHO | \
                         CFG_CMD_JFFS2)

/*#define CONFIG_COMMANDS	(CFG_CMD_IMI | CFG_CMD_BDI | CFG_CMD_MEMORY) */

#define CONFIG_BOOTP_MASK	CONFIG_BOOTP_DEFAULT

/* this must be included AFTER the definition of CONFIG_COMMANDS (if any) */
#include <cmd_confdefs.h>

#define CONFIG_BOOTDELAY	-1

#ifdef CONFIG_MACH_ME_LF1000
#define CONFIG_BOOTARGS "mem=32M rootfstype=ext2 init=/sbin/init console=ttyS0,115200 ether=10,0xf8800000,eth0 cs89x0_media=rj45 root=/dev/nfs rw nfsroot=192.168.0.113:/home/lfu/nfsroot ip=192.168.0.111:192.168.0.113:192.168.0.115:255.255.255.0:lf1000:eth0:off"
#else
#define CONFIG_BOOTARGS "mem=32M rootfstype=ext2 init=/sbin/init console=ttyS3,115200 ether=10,0xf8400000,eth0 cs89x0_media=rj45 root=/dev/nfs rw nfsroot=192.168.0.113:/home/lfu/nfsroot ip=192.168.0.111:192.168.0.113:192.168.0.115:255.255.255.0:lf1000:eth0:off"
#endif

//#define CONFIG_BOOTARGS "mem=128M ip=dhcp netdev=25,0,0xf1010000,0xf1010010,eth0"
#define CONFIG_BOOTCOMMAND "nand read $(loadaddr) $(knand) $(ksize); go $(loadaddr)"

/*
 * Static configuration when assigning fixed address
 */
/*#define CONFIG_NETMASK	255.255.255.0	/--* talk on MY local net */
/*#define CONFIG_IPADDR		xx.xx.xx.xx	/--* static IP I currently own */
/*#define CONFIG_SERVERIP	xx.xx.xx.xx	/--* current IP of my dev pc */
#define CONFIG_BOOTFILE	    "zImage" /* file to load */
#define CONFIG_LOADADDR	    2000000 /* default image load address */

#define	CONFIG_EXTRA_ENV_SETTINGS \
	"autostart=yes\0" \
	"knand=00080000\0" \
	"ksize=280000\0" \
	"lboot=tftp 0 lightning-boot.bin; go 0\0" \
	""

/*
 * Miscellaneous configurable options
 */
#define CFG_LONGHELP	/* undef to save memory     */
#define CFG_PROMPT	"LF1000 # "	/* Monitor Command Prompt   */
//AKM-#define CFG_CBSIZE	256		/* Console I/O Buffer Size  */
#define CFG_CBSIZE	1024		/* Console I/O Buffer Size  */
/* Print Buffer Size */
#define CFG_PBSIZE	(CFG_CBSIZE+sizeof(CFG_PROMPT)+16)
#define CFG_MAXARGS	64		/* max number of command args   */
#define CFG_BARGSIZE	CFG_CBSIZE	/* Boot Argument Buffer Size    */

#undef	CFG_CLKS_IN_HZ		/* everything, incl board info, in Hz */
//#define CFG_LOAD_ADDR	0x7fc0	/* default load address */
#define CFG_LOAD_ADDR	0x02000000	/* default load address */

/*-----------------------------------------------------------------------
 * Stack sizes
 *
 * The stack sizes are set up in start.S using the settings below
 */
#define CONFIG_STACKSIZE	(128*1024)	/* regular stack */
#ifdef CONFIG_USE_IRQ
#define CONFIG_STACKSIZE_IRQ	(4*1024)	/* IRQ stack */
#define CONFIG_STACKSIZE_FIQ	(4*1024)	/* FIQ stack */
#endif

/*-----------------------------------------------------------------------
 * Physical Memory Map
 */
#define CONFIG_NR_DRAM_BANKS    1	/* we have 1 bank of DRAM */
#define PHYS_SDRAM_1            0x00000000	/* SDRAM Bank #1 */
#define PHYS_SDRAM_1_SIZE       0x02000000	/* 32 MB */


/*-----------------------------------------------------------------------
 * FLASH and environment organization
 */

//#define CFG_NAND_LEGACY
#define	NAND_MAX_CHIPS		1
#define CONFIG_FLASH_16BIT
#define CFG_MAX_NAND_DEVICE	1	/* Max number of NAND devices		*/
#if (defined CONFIG_MACH_ME_MP2530F || defined CONFIG_MACH_LF_MP2530F)
#define CFG_NAND_BASE		0x9C000000
#elif (defined CONFIG_MACH_ME_LF1000 || defined CONFIG_MACH_LF_LF1000)
#define CFG_NAND_BASE           (0x80000000+0x2C000000)
#else
#error "Unknown machine type, can't pick NAND_BASE address"
#endif
#define CFG_NAND_SELECT_DEVICE

/* Support for JFFS2 in NAND */
#define CONFIG_JFFS2_CMDLINE
#define CONFIG_JFFS2_NAND 1
#define NAND_CHIP_NAME "default"
#define MTDIDS_DEFAULT "nand0=" NAND_CHIP_NAME

#define CFG_MAX_FLASH_BANKS	1		/* max number of memory banks */
#define PHYS_FLASH_SIZE         0x34000000	/* 64MB */
#define CFG_FLASH_WORD_SIZE  unsigned long
/* timeout values are in ticks */
#define CFG_FLASH_ERASE_TOUT	(20*CFG_HZ)	/* Timeout for Flash Erase */
#define CFG_FLASH_WRITE_TOUT	(20*CFG_HZ)	/* Timeout for Flash Write */
#define CFG_MAX_FLASH_SECT	(256)

#define PHYS_FLASH_1		(CFG_FLASH_BASE)

#define CFG_ENV_IS_NOWHERE
//#define	ENV_IS_EMBEDDED
//#define CFG_ENV_IS_IN_NAND	1               /* env in flash instead of CFG_ENV_IS_NOWHERE */
//#define CFG_ENV_IS_IN_FLASH			/* env in flash instead of CFG_ENV_IS_NOWHERE */
#define CFG_ENV_SECT_SIZE       0x20000		/* 128 KB sectors */
#define CFG_ENV_SIZE            0x20000		/* Total Size of Environment Sector */

/* 
	The following macros position the environment store in NAND. It is stored at
	the end of the third NAND partition defined in the kernel. This partition is 
	intended for manufacturing data. The whole idea of using this partition is 
	thoroughly nasty, but other options are equally as bad. At least this way
	the partition may be halfway usable, and file writes to the partition won't
	clobber the U-Boot environment and vice versa. When mounted it will probably
	display errors, but this shouldn't be fatal.
*/
#define CFG_ENV_REL_OFFSET (CONFIG_NAND_LF1000_P2_SIZE-CFG_ENV_SIZE)
#define CFG_ENV_ADDR       (CONFIG_NAND_LF1000_P0_SIZE \
                           +CONFIG_NAND_LF1000_P1_SIZE \
                           +CFG_ENV_REL_OFFSET)
#define CFG_ENV_OFFSET      CFG_ENV_ADDR  /* environment starts here, relative to start of device */

#endif							/* __CONFIG_H */
